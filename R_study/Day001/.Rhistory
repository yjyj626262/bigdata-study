# 기본문법
## 도움말 : 함수나 명령어에 대한 설명과 사용법을 확인
help(log)
?log
?log
?log
?log
# 기본문법
## 도움말 : 함수나 명령어에 대한 설명과 사용법을 확인
help(log)
?log
# 기본문법
## 도움말 : 함수나 명령어에 대한 설명과 사용법을 확인
help(log)
?log
# 기본문법
## 도움말 : 함수나 명령어에 대한 설명과 사용법을 확인
help(log)
### 예약어에 대한 도움말을 볼 경우 앞뒤에 쌍따옴표
help("for")
exampe(lm)
example(lm)
# 연산자(operand)
## 산술연산자 : +, -, *, /(실수몫), %%(정수몫), %/%(나머지), ^ - **(거듭제곱)
1+2
+2
(10+50-5)*4/10
10/3
10%%3
8%%3
10%%3
11%%3
8%/%3
4 ** 2
4 ** 3
10%/%3
11%%3
10%/%3
### 변수
x <- 5
x
y=10
y
source("~/.active-rstudio-document", echo=TRUE)
y
## 출력함수 prin()
print(x)
## 변수 대입과 동시에 출력
(z <- 2)
y
x + y
x
# 변수 제거 : rm (변수), rm = remove
rm(x)
x
xx <- print # 객체복사
print('안녕하세요')
xx('안녕하세요')
rm(xx)
## 현재 메모리에 저장된 변수의 목록을 확인하는 명령
ls()
help(ls)
x<- "one"
x
y="two"
x+y
rm(y)
print(x, quote = F) # T = True, F = False
# 출력서식을 지정하여 출력하는 함수 sprintf = string print format
## 서식기호 : %s(문자열), %f(실수열), %i(정수열)
### 홍길동의 나이는 낭랑 18세입니다.
print("홍길동의 나이는 낭랑 18세입니다.")
sprintf("%s의 나이는 낭랑 %i세입니다.", "이순신", 23)
# 자료구조 : 데이터를 효율적으로 저장하기 위한 틀
## 벡터(vector) : 하나 이상의 데이터를 관리하는 자료구조, 요소
## 벡터의 특징 : R에서 하나 이상의 데이터를 관리하는 자료구조, scalar도 vecot로 취급
## 벡터의 생성함수 : c()   combine
## 벡터의 인덱스으 시작값은 1부터
## 하나의 벡터에는 하나의 자료형만 사용할 수 있다.
## 숫자와 문자가 혼합되어있으면 문자로 취급
## R에는 특수 상수라는 표현이 있다.
## NA : 결측값 (비어있는 값)
v1 <- c(1, 2, 3, 4, 5)
v2 <- c('ㄱ','ㄴ','ㄷ','ㄹ','ㅁ')
sprintf("%s의 나이는 낭랑 %i세입니다.", v2, v1)
rm(v2)
v2 <- 1:5
## 정수와 실수를 같이 담으면 실수형이다.
v3 <- c(1.5, 10, 'two', 5, 'five')
## 문자까지 같이담아버리면 문자형이다. => 큰 자료형이 기준
v4 <- c(100, "one", T, FALSE)
## start:end, step=1(생략)
x2 = 1:15s
## start:end, step=1(생략)
x2 = 1:15
x2
x3 = 1:15, step=2.4
x3 = 1:15, step=2
x3 = 1:15 step = 2
x3 = 1:15, step = 2
x3 = 1:15 2
x3
x3 = c('one', 'two', 'three')
x3
x1 = c(1,2,3,4)
x1
# 벡터 합치기 : append()
x3 = append(x1, 0, x2)
# 벡터 합치기 : append()
x4 = append(x1, 0, x2)
# 벡터 합치기 : append()
x3 = append(x1, 0)
x3
# 벡터 합치기 : append()
x3 = append(x1, 12)
x3
# 벡터 합치기 : append()
x3 = append(x1, x2)
x3
x4 = c(x1,0,)
x4 = c(x1,0)
x4
x4 = c(x1,0,x2)
x4
# 벡터안에 또 다른 벡터를 담을 수 있다.
c(1,2,3, c(4:6))
y 9=(c)
yy = c(1,2,3,4,5)
# seq(start, stop, step을 쓰지 않으면 기본적으로 1이다.)
xx = seq(1, 5)
zz = 1:5
yy = c(1,2,3,4,5)
seq(1,10,by=2)
seq(1,10,by=1.5)
seq(0, 1, legth.out = 11) # length.out - 요소의 개수
a = seq(10) # 10개의 요소
a
seq(0, 1, length.out = 11) # length.out - 요소의 개수
## rep(벡터, time = 반복횟수), each = 요소별 반복횟수
rep(c(1:3), times=3)
rep(c(1:3), each = 2)
## 자료형을 이용한 벡터의 생성
### numeric(integer정수, double실수), character, logical
integer(length=10)
## 벡터를 구성하는 자료를 요소(item)라고 부른다.
## 요소의 위치를 인덱스(index)라고 부른다.
## 인덱스의 시작은 1부터이다.
### 인덱스를 이용한 요소에 접근[ ], [조건식]
x = 1:11
x
x[5]
x[2:5]
x[c(1, 3, 5)]
x = 2:10
x[c(1, 3, 5)]
# 벡터의 각 셀에 이름을 부여할 수 있다.
y = c(a=1, b=10, c=7)
y
y['a']
y[c('b','c')]
xx = c(1,3,5)
xx
names(xx) = c('lee','kim','park')
xx
xx[1,3]
xx[c(1,5)]
xx[c(1,3)]
xx[c('lee','park')]
names(xx)
names(xx)[2]
names(xx)[2]
# 벡터의 각 셀에 이름을 부여할 수 있다.
y = c(d=a=1, e=b=10, f=c=7)
# 벡터의 각 셀에 이름을 부여할 수 있다.
y = c(d<-a=1, e<-b=10, f<-c=7)
# 벡터의 각 셀에 이름을 부여할 수 있다.
y = c(a=1, b=10, c=7)
xx
## 벡터의 주요 내장함수
typeof(xx)
mode(xx)
### 벡터의 길이 = 벡터를 구성하는 요소의 개수, length()
a = c('x', 'y', 'z')
a[2]
a[-1]
length(a)
NROW(a)
nrow(a)
### 벡터의 길이 = 벡터를 구성하는 요소의 개수, length()
a = c(ab='x', bc='y', cd='z')
a[2]
NROW(a)
nrow(a)
View(lm.D9)
## R에 내장된 데이터셋 확인 - data()
data()
help(iris)
iris
# 데이터 구조
str(iris)
head(iris) # 앞의 데이터 6개의 행 추출
tail(iris)
tail(iris,10)
summary(iris)
x= 1:10
x
sum(x)
summary(x)
mean(x)
var(x)
sd(x)
median(x)  # 1 2 3 4 5 6의 경우 3,4 인데 이때는 둘의 평균값으로출력
max()
max(x)
range(x)
quantile(x)
y = c(1:5)
10+20
x + y  # 벡터화 연산
x = c(1:5)
y = c(6:10)
x + y  # 벡터화 연산
z + x
z = c(1:3)
z + x
x + 9
x-9
x[3] = 30
x
x[c(2,4)] = 9
x
## 벡터 x의 모든 요소의 값을 1로 변경하시오.
x[]=1
x
x[6]=1
x
## 벡터 x의 첫번째 요소자리에 0을 추가
x[0]=0
x
c()
x = c()
y[1:5]=1
y
z = c(x,y)
z
z = c(0,y)
z
## append(벡터, 벡터)
x = append(x,0)
x
help(append)
v_b = c('D', 'E')
v_a = c('A','B','C','F','G')
append(v_a,v_b)
append(v_a,v_b,3)
append(v_a,v_b,3) -> v_c # 3번째 위치 뒤에 추가
## 벡터 요소 삭제 : -
v_a = 11:20
v_a
# 1,3,5,6 위치의 값만 화면에 표시
v_a[c(1,3,5,6)]
# 1,3,5,6의 요소를 제외한 값만 화면에 표시
v_a[-c(1,3,5,6)]
# v_a의 마지막 요소의 값 추출
v_a[c(10)]
# v_a의 마지막 요소의 값 추출
length(v_a)
v_a(-length(v_a))
v_a(-c(length(v_a))
v_a(-c(length(v_a))
v_a(-c(length(v_a)))
v_a[-c(length(v_a))]
v_a[-length(v_a)]
# and/&, or/|, not/!
!v_b
# 논리형 벡터 : 논리형(logical) - True(T) or False(F)
v_b = c(FALSE, TRUE, TRUE, FALSE, FALSE)
# and/&, or/|, not/!
!v_b
v_b[-c(2:3)]
# 펜시인덱스
## 논리값을 이용하여 인덱스 처리하는 기능
v_t = c('첫번째', '두번째', '세번째', '네번째','다섯번째')
v_t
## 두번째, 세번째 요소만 추출
v_t[c(2:3)]
v_t[v_b]
## %in% : ~ 안에 포함여부를 판단(true or false)하여 출력하는 연산자
'a' %in% c('a','b','c')
## 합집합(union), 교집합(intersection), 차집합(setdiff)
setdiff(c('a','b','c'),c('a','b')
## 합집합(union), 교집합(intersection), 차집합(setdiff)
setdiff(c('a','b','c'),c('a','b'))
## 합집합(union), 교집합(intersection), 차집합(setdiff)
setdiff(c('a','b','c'),c('a','b'))
## 합집합(union), 교집합(intersection), 차집합(setdiff)
setdiff(c('a','b','c'),c('a','d'))
interaction(c('a','b','c'),c('a','d'))
## 합집합(union), 교집합(intersection), 차집합(setdiff)
setdiff(c('a','b','c'),c('a','d'))
intersection(c('a','b','c'),c('a','d'))
intersect(c('a','b','c'),c('a','d'))
unionc(('a','b','c'),c('a','d'))
unionc(('a','b','c'),c('a','d'))
union(('a','b','c'),c('a','d'))
union(c('a','b','c'),c('a','d'))
## 집합간의 비교연산
setequal(c('a','b','c'),c('a','d'))
## 집합간의 비교연산
setequal(c('a','b','c'),c('a','b','c','d'))
setequal(c('a','b','c'),c('a','b','c','b'))
## all(), any()
x = 1:10
x
x>5
all(x>5)
any(x>5)
any(x>5)
head(x)
tail(x,3)
str(iris)
v_c = c('사과','복숭아','오렌지','복숭아')
v_c = c('사과','복숭아', '사과','오렌지','복숭아','오렌지','복숭아')
v_c
str(v_c)
v_factor = factor(v_c)
str(v_factor)
v_factor
str(iris)
v_c = c('사과','복숭아', '사과','오렌지','복숭아','오렌지','복숭아')
v_c
str(v_c)
v_factor = factor(v_c)
str(v_factor)
v_factor
mode(v_factor)
## numeric, character, logical, complex
is.numeric(v_factor) #()의 값이 numeric이 맞나요?
is.integer(v_factor)
mode(v_factor)
typeof(v_factor)
as.charcter(v_factor)
as.character(v_factor)
str(v_factor)
is.charcter(v_factor)
is.character(v_factor)
str(v_c)
str(v_c)
v_c = c('사과','복숭아', '사과','오렌지','복숭아','오렌지','복숭아')
str(v_c)
v_factor = factor(v_c)
str(v_factor)
str(v_c)
v_factor = as.charcter(v_factor)
v_factor = as.character(v_factor)
str(v_factor)
is.character(v_factor)
str(v_c)
v_factor = factor(v_c)
str(v_c)
str(v_factor)
v_factor
str(v_factor)
v_factor
v_num = as.numeric(v_factor)
v_num
x <- c("apple", "banana", "cherry", "apple", "banana")
x_factor <- factor(x, levels = c("cherry", "banana", "apple"), ordered = FALSE)
x
x <- c("apple", "banana", "cherry", "apple", "banana")
x_factor <- factor(x, levels = c("cherry", "banana", "apple"), ordered = FALSE)
x_factor
anc=as.numeric(x_factor)
anc
help(matrix)
# 3행 3열 행렬 생성
## nrow = 행의 수, ncol = 열의 수
matrix(1:9, nrow = 3)
# 3행 3열 행렬 생성
## nrow = 행의 수, ncol = 열의 수
matrix(1:8, nrow = 3)
# 3행 3열 행렬 생성
## nrow = 행의 수, ncol = 열의 수
matrix(1:9, nrow = 3)
# 3행 3열 행렬 생성
## nrow = 행의 수, ncol = 열의 수
matrix(1:9, nrow = 3, byrow = true)
# 3행 3열 행렬 생성
## nrow = 행의 수, ncol = 열의 수
matrix(1:9, nrow = 3)## matrix 참조[행의위치, 열의위치]
## matrix 참조[행의위치, 열의위치]
matrix(1:9, nrow = 3, byrow = T)
## matrix 참조[행의위치, 열의위치]
matrix(1:9, nrow = 3, byrow = True)
## matrix 참조[행의위치, 열의위치]
matrix(1:9, nrow = 3, byrow = TRUE)
## 행렬의 이름을 부여하는 함수 dimnames
dimnamex = list(c('r1','r2','r3'),c('c1','c2','c3'))
x = matrix(1:9, nrow = 3, byrow = TRUE , dimnaes = dimnamex)
x = matrix(1:9, nrow = 3, byrow = TRUE , dimnames = dimnamex)
x
## 행렬의 요소 추출 : 인덱스[행위치, 열위치]
x[2,2]
x[1:2,2:3]
x[1,]
x[,3]
x[1:2,]
x[c(1,2),]
x[2:3,2:3]
x[-3,]
x[2:3,2:3]
x[c2,]
x[,c2]
x[,'c2']
x['r3',]
x[c(1,3),c(1,3)]
y = matrix(1:9, nrow =3)
y
y+2
y /2
y = matrix(1:9)
y
y = matrix(1:9, nrow= 3)
y
a= matrix(1:4, nrow = 2)
b = matrix(5:8, nrow = 2)
a+b
y+a
a*b
a %*% a
a
b
a %*% b
## 전치행렬 : 행과 열의 위치를 바꿔주는 함수
t(a)
nrow(a)
xx = matrix(1:6, ncol = 3)
nrow(xx)
ncol(xx)
xx
c(a,b)
cbind(a,b)
rbind(a,b)
## 배열 : array(벡터형데이터, dim=c(행, 열))
## 3행 4열짜리 2차원 배열을 생성
array(1:12, dim = c(4,3))
## 배열 : array(벡터형데이터, dim=c(행, 열))
## 3행 4열짜리 2차원 배열을 생성
array(1:12, dim = c(3,4))
## 배열 : array(벡터형데이터, dim=c(행, 열))
## 3행 4열짜리 2차원 배열을 생성
array(1:12, dim = -c(3,4))
## 배열 : array(벡터형데이터, dim=c(행, 열))
## 3행 4열짜리 2차원 배열을 생성
array(1:12, dim = c(3,4))
## 배열 : array(벡터형데이터, dim=c(행, 열))
## 3행 4열짜리 2차원 배열을 생성
x=array(1:12, dim = c(3,4))
x
dim(x)
dim(x)
# 2행 2열짜리 행렬 3개를 생성하시오.
yy = array(1:12, dim = c(2, 2, 3))
yy
yy[1, 1, 1]
yy[1,2,3]
# 행렬 연산 apply(행렬데이터, 방향, 연산함수)
## 방향 : 1(행단위), 2(열단위)
z = array(1:12,c(3,4))
z
sum(z)
mean(z)
apply(z, 1, sum)
apply(z, 2, mean)
apply(yy, 3, sum)
# sample() : 벡터나 배열에서 샘플을 추출할 때 사용
w = array(1:12, c(3,4))
w
help(sample)
sample(w, 10)
sample(1:45,6)
sample(1:15, 20, replace = T)
# 데이터프레임(dataframe) : 데이터베이스의 표(table)
## 단일 자료형을 사용하는 자료구조 : 변수, 벡터, 팩터, 행렬, 배열
## 다중 자료형을 사용하는 자료구조 : 데이터프레임, 리스트
## 데이터분석의 기본 자료형 : 행(record, 관측데이터), 열(attribute, feature, 특성)  => 열마다 다른 데이터타입을 담을 수 있다.
help(data.frame)
## 데이터 프레임 생성, as.data.frame(matrix)
## data.frame(data, matrix)
aa = data.frame(x = c(1, 2, 3, 4, 5), y = c('a','b','c','d','e'))
aa
## 여러개의 벡터를 이용한 데이터프레임 생성
names = c('홍길동','이순신','장보고','임꺽정','김유신')
ages = c(20, 23, 31, 28, 35)
gender = c('F','M','M','F','F')
scores = c(80, 95, 87, 100, 79)
student
student = data.frame(names, ages, scores, gender)
student
stu = data.frame(name = names, age = ages, gender = gender, score= scores)
stu
str(stu)
stu$name
stu$name[3]   # stu 데이터프레임에서 name열을 출력해라
stu$2[3]   # stu 데이터프레임에서 name열을 출력해라
stu$name[3]   # stu 데이터프레임에서 name열을 출력해라
stu[3, $name]
stu[4, 'age']
stu[4, 2]
# gender와 score만 추출
stu[,c('gender','score')]
stu[,3:4]
