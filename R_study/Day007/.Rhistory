building_number = `건물번호`,
date_time = `일시`,
temperature = "기온.C.",
rainfall = "강수량.mm.",
windspeed = `풍속.m.s.`,
humidity = `습도...`)
building <- rename(building_info,
building_number = '건물번호',
building_type = '건물유형',
total_area = '연면적.m2.',
cooling_area = '냉방면적.m2.',
solar_power_capacity = '태양광용량.kW.',
ess_capacity = 'ESS저장용량.kWh.',
pcs_capacity = 'PCS용량.kW.'
)
## 건물유형들 한글->영어
building$building_type <- ifelse(building[, 'building_type'] == '건물기타', 'Other Buildings',
ifelse(building[, 'building_type'] == '공공', 'Public',
ifelse(building[, 'building_type'] == '대학교', 'University',
ifelse(building[, 'building_type'] == '데이터센터', 'Data Center',
ifelse(building[, 'building_type'] == '백화점및아울렛', 'Department Store and Outlet',
ifelse(building[, 'building_type'] == '병원', 'Hospital',
ifelse(building[, 'building_type'] == '상용', 'Commercial',
ifelse(building[, 'building_type'] == '아파트', 'Apartment',
ifelse(building[, 'building_type'] == '연구소', 'Research Institute',
ifelse(building[, 'building_type'] == '지식산업센터', 'Knowledge Industry Center',
ifelse(building[, 'building_type'] == '할인마트', 'Discount Mart',
ifelse(building[, 'building_type'] == '호텔및리조트', 'Hotel and Resort',
building[, 'building_type']))))))))))))
## 날짜 데이터처리
train$date <- as.Date(train$date_time, '%Y%m%d')
train$month <- as.numeric(substr(as.character(train$date_time), 5, 6))
train$day <- as.numeric(substr(as.character(train$date_time), 7, 8))
train$hour <- as.numeric(substr(as.character(train$date_time), 10, 11))
train$weekday <- weekdays(train$date)
str(train)
train <- train[,-c(1,3)]
str(train)
## 결측치 변경
train$sunshine <- ifelse(is.na(train$sunshine), 0, train$sunshine)
train$solar_radiation <- ifelse(is.na(train$solar_radiation), 0, train$solar_radiation)
train$rainfall <- ifelse(is.na(train$rainfall), 0, train$rainfall)
building$solar_power_capacity <- ifelse(building$solar_power_capacity=='-', 0, building$solar_power_capacity)
building$ess_capacity <- ifelse(building$ess_capacity=='-', 0, building$ess_capacity)
building$pcs_capacity <- ifelse(building$pcs_capacity=='-', 0, building$pcs_capacity)
train$windspeed <- na.approx(train$windspeed)
train$humidity <- na.approx(train$humidity)
## 이상치 관측
boxplot(train$windspeed)$stats
## 건물별로 장치가 있는지 없는지
building$solar <- ifelse(building$solar_power_capacity==0)
train$weekday <- as.factor(train$weekday)
building$building_number <- as.factor(building$building_number)
building$building_type <- as.factor(building$building_type)
building$solar_power_capacity <- as.numeric(building$solar_power_capacity)
building$ess_capacity <- as.numeric(building$ess_capacity)
building$pcs_capacity <- as.numeric(building$pcs_capacity)
## 건물별로 데이터 보기
total <- left_join(train, building, by = "building_number")
## 건물 데이터 변환
train$building_number <- as.factor(train$building_number)
## 건물별로 데이터 보기
total <- left_join(train, building, by = "building_number")
str(total)
total$building_number <- as.numeric(total$building_number)
str(total)
total <- total[,-c(9,13,14)]
str(total)
total_list <- split(total, total$building_number)
total_list$'1'
total_list$1
total_list$'1'
as.data.frame(total_list)
summary(total_list$'1')
## 상관관계 분석
cor(total_list$'1')
## 상관관계 분석
apply(total_list$'1', 2, function(x){sum(is.na(x))})
cor(total_list$'1')
cor_matrix <- cor(total_list$'1')
names(total_list$'1')[sapply(total_list$'1', function(col) length(unique(col)) == 1)]
head(total)
names(total_list$'1')[sapply(total_list$'1', function(col) length(unique(col)) == 1)]
ncol(total)
matrix(1:256, 16, 16)
matrix(1:256, names(total), names(total))
matrix(1:256, x=names(total), y=names(total))
matrix(1:256, nrow = length(names(total)), ncol = length(names(total)))
mat <- matrix(1:256, nrow = length(names(total)), ncol = length(names(total)))
rownames(mat) <- names(total)
colnames(mat) <- names(total)
mat
as.data.frame(mat)
write.csv(mat, "C:/k_digital/data/mat.csv", row.names = TRUE)
cor_matrix <- cor(total_list$'1')
cor_matrix <- cor(total_list$'1', use = "complete.obs")
constant_vars <- names(total_list$'1')[sapply(total_list$'1', function(col) length(unique(col)) == 1)]
constant_vars
total1 <- total_list$'1'[,-constant_vars]
constant_indices <- which(names(total_list$'1') %in% constant_vars)
total1 <- total_list$'1'[,-constant_indices]
cor_matrix <- cor(total1)
mat <- as.data.frame(cor_matrix)
write.csv(mat, "C:/k_digital/data/mat.csv", row.names = TRUE)
write.csv(mat, "C:/k_digital/data/mat.csv", row.names = TRUE)
z(mat)
## 주성분 분석
scale(total1)
## 주성분 분석
scale(total_list$'1')
## 주성분 분석
scale(total1)
## 주성분 분석
### 데이터 표준화
scaled_total1 <- scale(total1)
### PCA 수행
pca_result <- prcomp(scaled_data)
### PCA 수행
pca_result <- prcomp(scaled_total1)
### PCA 결과 요약
summary(pca_result)
### 주성분 로딩값
loadings(pca_result)
### 주성분 로딩값
pca_result$rotation
loadings(pca_result$rotation)
### PCA 결과 요약
summary(pca_result)
plot(pca_result)
### PCA 결과 요약
summary(pca_result)
pca_result
### PCA 결과 요약
summary(pca_result)
pca_result$x
### PCA 결과 요약
summary(pca_result)
plot(pca_result, type='l')
PC1
### PCA 결과 요약
name(summary(pca_result))
### PCA 결과 요약
names(summary(pca_result))
PC1
pca_result
View(total
)
total$holiday <- 1
total$holiday <- ifelse(total$weekday %in% c("토요일", "일요일"), 0, ifelse(total$date %in% c("2022-06-01", "2022-06-06"), 0, 1))
source("C:/k_digital/R/source/Day007/전력사용량.R", echo=TRUE)
total <- total[,-'sunshine']
total <- total[,-c('sunshine')]
no <- c('sunshine')
total <- total[,-no]
rm(no)
total <- total[,!='sunshine']
total <- total[,-'sunshine']
total3 <- total[,'sunshine']
rm(total3)
names(total)
total <- total[,-c(6)]
## 건물별로 데이터 보기
total <- left_join(train, building, by = "building_number")
names(total)
str(total)
## 데이터 불러오기
train_df = read.csv('C:/k_digital/data/train.csv')
building_info = read.csv('C:/k_digital/data/building_info.csv')
test_df = read.csv('C:/k_digital/data/test.csv')
## 데이터 구조 확인
str(train_df)
str(building_info)
str(test_df)
## head
head(train_df)
head(building_info)
head(test_df)
## 사본만들기
train <- train_df
build <- building_info
test <- test_df
## 컬럼확인
names(train_df)
names(test_df)
names(building_info)
### test에는 일조, 일사, 전력소비량이 없다
## 컬럼이름 영어로 바꾸기
library(dplyr)
train <- rename(train_df,
building_number = `건물번호`,
date_time = `일시`,
temperature = "기온.C.",
rainfall = "강수량.mm.",
windspeed = `풍속.m.s.`,
humidity = `습도...`,
sunshine = `일조.hr.`,
solar_radiation = `일사.MJ.m2.`,
power_consumption = `전력소비량.kWh.`)
test <- rename(test_df,
building_number = `건물번호`,
date_time = `일시`,
temperature = "기온.C.",
rainfall = "강수량.mm.",
windspeed = `풍속.m.s.`,
humidity = `습도...`)
building <- rename(building_info,
building_number = '건물번호',
building_type = '건물유형',
total_area = '연면적.m2.',
cooling_area = '냉방면적.m2.',
solar_power_capacity = '태양광용량.kW.',
ess_capacity = 'ESS저장용량.kWh.',
pcs_capacity = 'PCS용량.kW.'
)
## 건물유형들 한글->영어
building$building_type <- ifelse(building[, 'building_type'] == '건물기타', 'Other Buildings',
ifelse(building[, 'building_type'] == '공공', 'Public',
ifelse(building[, 'building_type'] == '대학교', 'University',
ifelse(building[, 'building_type'] == '데이터센터', 'Data Center',
ifelse(building[, 'building_type'] == '백화점및아울렛', 'Department Store and Outlet',
ifelse(building[, 'building_type'] == '병원', 'Hospital',
ifelse(building[, 'building_type'] == '상용', 'Commercial',
ifelse(building[, 'building_type'] == '아파트', 'Apartment',
ifelse(building[, 'building_type'] == '연구소', 'Research Institute',
ifelse(building[, 'building_type'] == '지식산업센터', 'Knowledge Industry Center',
ifelse(building[, 'building_type'] == '할인마트', 'Discount Mart',
ifelse(building[, 'building_type'] == '호텔및리조트', 'Hotel and Resort',
building[, 'building_type']))))))))))))
## 날짜 데이터처리
train$date <- as.Date(train$date_time, '%Y%m%d')
train$month <- as.numeric(substr(as.character(train$date_time), 5, 6))
train$day <- as.numeric(substr(as.character(train$date_time), 7, 8))
train$hour <- as.numeric(substr(as.character(train$date_time), 10, 11))
train$weekday <- weekdays(train$date)
train <- train[,-c(1,3)]
## 건물 결측치 변경
building$solar_power_capacity <- ifelse(building$solar_power_capacity=='-', 0, building$solar_power_capacity)
building$ess_capacity <- ifelse(building$ess_capacity=='-', 0, building$ess_capacity)
building$pcs_capacity <- ifelse(building$pcs_capacity=='-', 0, building$pcs_capacity)
building$solar <- ifelse(building$solar_power_capacity==0,0,1)
building$ess <- ifelse(building$ess_capacity==0,0,1)
building$pcs <- ifelse(building$pcs_capacity==0,0,1)
### windspeed와 humidity 결측치 변경
library(zoo)
train$windspeed <- na.approx(train$windspeed)
train$humidity <- na.approx(train$humidity)
## 건물 데이터 변환
train$building_number <- as.factor(train$building_number)
train$weekday <- as.factor(train$weekday)
building$building_number <- as.factor(building$building_number)
building$building_type <- as.factor(building$building_type)
building$solar_power_capacity <- as.numeric(building$solar_power_capacity)
building$ess_capacity <- as.numeric(building$ess_capacity)
building$pcs_capacity <- as.numeric(building$pcs_capacity)
## 건물별로 데이터 보기
total <- left_join(train, building, by = "building_number")
names(total)
str(total)
total$building_number <- as.numeric(total$building_number)
str(total)
total$holiday <- 1
total$holiday <- ifelse(total$weekday %in% c("토요일", "일요일"), 0, ifelse(total$date %in% c("2022-06-01", "2022-06-06"), 0, 1))
total$holiday <- ifelse(total$weekday %in% c("토요일", "일요일"), 0, ifelse(total$date %in% c("2022-06-01", "2022-06-06"), 0, 1))
str(t1)
total$holiday <- ifelse(total$weekday %in% c("토요일", "일요일"), 0, ifelse(total$date %in% c("2022-06-01", "2022-06-06"), 0, 1))
total$holiday <- ifelse(total$weekday %in% c("토요일", "일요일"), 0, ifelse(total$date %in% c("2022-06-01", "2022-06-06"), 0, 1))
t1 <- total
str(t1)
## 데이터 불러오기
train_df = read.csv('C:/k_digital/data/train.csv')
building_info = read.csv('C:/k_digital/data/building_info.csv')
test_df = read.csv('C:/k_digital/data/test.csv')
## 데이터 구조 확인
str(train_df)
str(building_info)
str(test_df)
## head
head(train_df)
head(building_info)
head(test_df)
## 사본만들기
train <- train_df
build <- building_info
test <- test_df
## 컬럼확인
names(train_df)
names(test_df)
names(building_info)
### test에는 일조, 일사, 전력소비량이 없다
## 컬럼이름 영어로 바꾸기
library(dplyr)
train <- rename(train_df,
building_number = `건물번호`,
date_time = `일시`,
temperature = "기온.C.",
rainfall = "강수량.mm.",
windspeed = `풍속.m.s.`,
humidity = `습도...`,
sunshine = `일조.hr.`,
solar_radiation = `일사.MJ.m2.`,
power_consumption = `전력소비량.kWh.`)
test <- rename(test_df,
building_number = `건물번호`,
date_time = `일시`,
temperature = "기온.C.",
rainfall = "강수량.mm.",
windspeed = `풍속.m.s.`,
humidity = `습도...`)
building <- rename(building_info,
building_number = '건물번호',
building_type = '건물유형',
total_area = '연면적.m2.',
cooling_area = '냉방면적.m2.',
solar_power_capacity = '태양광용량.kW.',
ess_capacity = 'ESS저장용량.kWh.',
pcs_capacity = 'PCS용량.kW.'
)
## 건물유형들 한글->영어
building$building_type <- ifelse(building[, 'building_type'] == '건물기타', 'Other Buildings',
ifelse(building[, 'building_type'] == '공공', 'Public',
ifelse(building[, 'building_type'] == '대학교', 'University',
ifelse(building[, 'building_type'] == '데이터센터', 'Data Center',
ifelse(building[, 'building_type'] == '백화점및아울렛', 'Department Store and Outlet',
ifelse(building[, 'building_type'] == '병원', 'Hospital',
ifelse(building[, 'building_type'] == '상용', 'Commercial',
ifelse(building[, 'building_type'] == '아파트', 'Apartment',
ifelse(building[, 'building_type'] == '연구소', 'Research Institute',
ifelse(building[, 'building_type'] == '지식산업센터', 'Knowledge Industry Center',
ifelse(building[, 'building_type'] == '할인마트', 'Discount Mart',
ifelse(building[, 'building_type'] == '호텔및리조트', 'Hotel and Resort',
building[, 'building_type']))))))))))))
## 날짜 데이터처리
train$date <- as.Date(train$date_time, '%Y%m%d')
train$month <- as.numeric(substr(as.character(train$date_time), 5, 6))
train$day <- as.numeric(substr(as.character(train$date_time), 7, 8))
train$hour <- as.numeric(substr(as.character(train$date_time), 10, 11))
train$weekday <- weekdays(train$date)
train <- train[,-c(1,3)]
## 건물 결측치 변경
building$solar_power_capacity <- ifelse(building$solar_power_capacity=='-', 0, building$solar_power_capacity)
building$ess_capacity <- ifelse(building$ess_capacity=='-', 0, building$ess_capacity)
building$pcs_capacity <- ifelse(building$pcs_capacity=='-', 0, building$pcs_capacity)
building$solar <- ifelse(building$solar_power_capacity==0,0,1)
building$ess <- ifelse(building$ess_capacity==0,0,1)
building$pcs <- ifelse(building$pcs_capacity==0,0,1)
## 날짜결측치 변경
train$sunshine <- ifelse(is.na(train$sunshine), 0, train$sunshine)
train$solar_radiation <- ifelse(is.na(train$solar_radiation), 0, train$solar_radiation)
train$rainfall <- ifelse(is.na(train$rainfall), 0, train$rainfall)
### windspeed와 humidity 결측치 변경
library(zoo)
train$windspeed <- na.approx(train$windspeed)
train$humidity <- na.approx(train$humidity)
## 건물 데이터 변환
train$building_number <- as.factor(train$building_number)
train$weekday <- as.factor(train$weekday)
building$building_number <- as.factor(building$building_number)
building$building_type <- as.factor(building$building_type)
building$solar_power_capacity <- as.numeric(building$solar_power_capacity)
building$ess_capacity <- as.numeric(building$ess_capacity)
building$pcs_capacity <- as.numeric(building$pcs_capacity)
## 건물별로 데이터 보기
total <- left_join(train, building, by = "building_number")
names(total)
str(total)
total$building_number <- as.numeric(total$building_number)
str(total)
total$holiday <- 1
total$holiday <- ifelse(total$weekday %in% c("토요일", "일요일"), 0, ifelse(total$date %in% c("2022-06-01", "2022-06-06"), 0, 1))
str(t1)
## 날짜결측치 변경
train$sunshine <- ifelse(is.na(train$sunshine), 0, train$sunshine)
train$solar_radiation <- ifelse(is.na(train$solar_radiation), 0, train$solar_radiation)
train$rainfall <- ifelse(is.na(train$rainfall), 0, train$rainfall)
## 데이터 불러오기
train_df = read.csv('C:/k_digital/data/train.csv')
building_info = read.csv('C:/k_digital/data/building_info.csv')
test_df = read.csv('C:/k_digital/data/test.csv')
## 데이터 구조 확인
str(train_df)
str(building_info)
str(test_df)
## head
head(train_df)
head(building_info)
head(test_df)
## 사본만들기
train <- train_df
build <- building_info
test <- test_df
## 컬럼확인
names(train_df)
names(test_df)
names(building_info)
## 컬럼이름 영어로 바꾸기
library(dplyr)
train <- rename(train_df,
building_number = `건물번호`,
date_time = `일시`,
temperature = "기온.C.",
rainfall = "강수량.mm.",
windspeed = `풍속.m.s.`,
humidity = `습도...`,
sunshine = `일조.hr.`,
solar_radiation = `일사.MJ.m2.`,
power_consumption = `전력소비량.kWh.`)
test <- rename(test_df,
building_number = `건물번호`,
date_time = `일시`,
temperature = "기온.C.",
rainfall = "강수량.mm.",
windspeed = `풍속.m.s.`,
humidity = `습도...`)
building <- rename(building_info,
building_number = '건물번호',
building_type = '건물유형',
total_area = '연면적.m2.',
cooling_area = '냉방면적.m2.',
solar_power_capacity = '태양광용량.kW.',
ess_capacity = 'ESS저장용량.kWh.',
pcs_capacity = 'PCS용량.kW.'
)
## 건물유형들 한글->영어
building$building_type <- ifelse(building[, 'building_type'] == '건물기타', 'Other Buildings',
ifelse(building[, 'building_type'] == '공공', 'Public',
ifelse(building[, 'building_type'] == '대학교', 'University',
ifelse(building[, 'building_type'] == '데이터센터', 'Data Center',
ifelse(building[, 'building_type'] == '백화점및아울렛', 'Department Store and Outlet',
ifelse(building[, 'building_type'] == '병원', 'Hospital',
ifelse(building[, 'building_type'] == '상용', 'Commercial',
ifelse(building[, 'building_type'] == '아파트', 'Apartment',
ifelse(building[, 'building_type'] == '연구소', 'Research Institute',
ifelse(building[, 'building_type'] == '지식산업센터', 'Knowledge Industry Center',
ifelse(building[, 'building_type'] == '할인마트', 'Discount Mart',
ifelse(building[, 'building_type'] == '호텔및리조트', 'Hotel and Resort',
building[, 'building_type']))))))))))))
## 날짜 데이터처리
train$date <- as.Date(train$date_time, '%Y%m%d')
train$month <- as.numeric(substr(as.character(train$date_time), 5, 6))
train$day <- as.numeric(substr(as.character(train$date_time), 7, 8))
train$hour <- as.numeric(substr(as.character(train$date_time), 10, 11))
train$weekday <- weekdays(train$date)
train <- train[,-c(1,3)]
## 건물 결측치 변경
building$solar_power_capacity <- ifelse(building$solar_power_capacity=='-', 0, building$solar_power_capacity)
building$ess_capacity <- ifelse(building$ess_capacity=='-', 0, building$ess_capacity)
building$pcs_capacity <- ifelse(building$pcs_capacity=='-', 0, building$pcs_capacity)
building$solar <- ifelse(building$solar_power_capacity==0,0,1)
building$ess <- ifelse(building$ess_capacity==0,0,1)
building$pcs <- ifelse(building$pcs_capacity==0,0,1)
## 날짜결측치 변경
train$sunshine <- ifelse(is.na(train$sunshine), 0, train$sunshine)
train$solar_radiation <- ifelse(is.na(train$solar_radiation), 0, train$solar_radiation)
train$rainfall <- ifelse(is.na(train$rainfall), 0, train$rainfall)
### windspeed와 humidity 결측치 변경
library(zoo)
train$windspeed <- na.approx(train$windspeed)
train$humidity <- na.approx(train$humidity)
## 건물 데이터 변환
train$building_number <- as.factor(train$building_number)
train$weekday <- as.factor(train$weekday)
building$building_number <- as.factor(building$building_number)
building$building_type <- as.factor(building$building_type)
building$solar_power_capacity <- as.numeric(building$solar_power_capacity)
building$ess_capacity <- as.numeric(building$ess_capacity)
building$pcs_capacity <- as.numeric(building$pcs_capacity)
## 건물별로 데이터 보기
total <- left_join(train, building, by = "building_number")
names(total)
str(total)
total$building_number <- as.numeric(total$building_number)
str(total)
total$holiday <- 1
total$holiday <- ifelse(total$weekday %in% c("토요일", "일요일"), 0, ifelse(total$date %in% c("2022-06-01", "2022-06-06"), 0, 1))
total$holiday <- ifelse(total$weekday %in% c("토요일", "일요일"), 0, ifelse(total$date %in% c("2022-06-01", "2022-06-06", "2022-08-15"), 0, 1))
str(t1)
total$holiday <- ifelse(total$weekday %in% c("토요일", "일요일"), 0, ifelse(total$date %in% c("2022-06-01", "2022-06-06", "2022-08-15"), 0, 1))
##---------------------------------------------------------------------------------
t1 <- total
str(t1)
t1$total_area
building_info
building_info$연면적.m2.
summary(t1)
cor(t1)
str(t1)
t1 <- t1 %>%
select(!weekday)
##---------------------------------------------------------------------------------
t1 <- total
t1 <- t1 %>%
select(!weekday,!date)
t1 <- t1 %>%
select(!weekday,!date)
t1 <- t1 %>%
select(!weekday&!date)
ncol(total)
ncol(t1)
str(t1)
t2 <- t2 %>%
select(!building_type)
t2 <- t1 %>%
select(!building_type)
cor(t2)
a <- cor(t2)
t2_cor <- a
t2_cor <- as.data.frame(a)
write.csv(t2_cor, "C:/k_digital/data/t2_cor.csv", row.names = TRUE)
t1 <- t1 %>%
select(!ess_capacity&!ess)
t1 <- t1 %>%
select(!total_area)
